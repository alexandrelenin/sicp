(define (estimate-integral predicat x1 x2 y1 y2 trials)
  (define (integral-test)
    (let ((x (random-in-range x1 x2))
          (y (random-in-range y1 y2)))
      (predicat x y)))

  (* (abs (* (- x2 x1) (- y2 y1)))
     (monte-carle trials integral-test)
     1.0))

(define (random-in-range low high)
    (let ((range (- high low)))
      (+ low (random range))))

(define (monte-carle trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0) (/ trials-passed trials))
          ((experiment) (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))
